#Set the path of all respirometry files
getwd()
path.p<-"../Respiration/Data/Intiial/Runs" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names
file.names
path.p<-"../Respiration/Data/intiial/runs" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names
getwd
getwd()
path.p
Photo.R<- data.frame(matrix(NA, nrow=length(file.names), ncol=4))
colnames(Photo.R) <- c("fragment.ID.full","Intercept", "umol.L.sec","Temp.C")
View(Photo.R)
#Bring in the file names.
file.names <- list.files(path = path.p, pattern = "csv$", full.names = FALSE)
file.names
path.p<-"Users/ninahmunk/Documents/Projects/Regeneration/Respiration/Data/initial/runs" #the location of all your respirometry files
#Bring in the file names.
file.names <- list.files(path = path.p, pattern = "csv$", full.names = FALSE)
file.names
path.p
getwd
#Set the path of all respirometry files
getwd()
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')
library('stringr')
library('Rmisc')
library('janitor')
library('readxl')
#Set the path of all respirometry files
getwd()
setwd("../Regeneration/Respiration/Data/initial")
#Set the path of all respirometry files
getwd()
path.p<-"Users/ninahmunk/Documents/Projects/Regeneration/Respiration/Data/initial/runs" #the location of all your respirometry files
#Bring in the file names.
file.names <- list.files(path = path.p, pattern = "csv$", full.names = FALSE)
setwd("../Regeneration/Respiration/Data/initial/runs")
path.p<-"Users/ninahmunk/Documents/Projects/Regeneration/Respiration/Data/initial/runs" #the location of all your respirometry files
#Bring in the file names.
file.names <- list.files(path = path.p, pattern = "csv$", full.names = FALSE)
file.names
print(file.names)
list.files(path=path.p)
list.files('runs')
file.names<- list.files('runs', pattern = "csv$", full.names = FALSE)
file.names
file.names<- list.files('runs', pattern = "csv$", recursive = TRUE)
file.names
file.names<- basename(list.files('runs', pattern = "csv$", recursive = TRUE))
file.names
#Set the path of all respirometry files
getwd()
#Set the path of all respirometry files
getwd()
path.p <- file.path(current_dir, "runs")
#Set the path of all respirometry files
current_dir<- getwd()
path.p <- file.path(current_dir, "runs")
#setwd("../Regeneration/Respiration/Data/initial/runs")
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names
#setwd("../Regeneration/Respiration/Data/initial/runs")
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = FALSE))
file.names
#Bring in the file names.
file.names <- list.files(path = path.p, pattern = "csv$", full.names = FALSE)
file.names
#setwd("../Regeneration/Respiration/Data/initial/runs")
file.names <- list.files(path = path.p, pattern = "csv$")
file.names
file.names.clean <- tools::file_path_sans_ext(file.names)
file.names.clean
print(file.names)
print(file.names.clean)
View(file.names.clean)
Photo.R<- data.frame(matrix(NA, nrow=length(file.names.clean), ncol=4))
colnames(Photo.R) <- c("fragment.ID.full","Intercept", "umol.L.sec","Temp.C")
View(Photo.R)
#load in sample information file
Sample.Info<- read.csv(file= "samp_info.csv")
View(Sample.Info)
Volume<- read.csv(file= "resp_info.csv")
Volume<- read.csv(file= "chamber_vol.csv")
Volume
getwd()
SA<- read.csv(file= "final_surface_area.csv")
getwd()
SA<- read.csv(file= "final_surface_area.csv")
Volume<- read.csv(file= "chamber_vol.csv")
SA<- read.csv(file= "final_surface_area.csv")
SA<- read.csv(file= "final_surface_areas.csv")
View(SA)
View(Volume)
#load in sample information file
Treatments<- read.csv(file= "samp_info.csv")
SA<- read.csv(file= "final_surface_areas.csv")%>%
mutate(coral_id = as.character(coral_id))
list_df = list(Treatments, Volume, SA)
Sample.Info<-list_df%>%reduce(inner_join, by= 'coral_id')
Sample.Info
View(Treatments)
Sample.Info<-list_df%>%reduce(inner_join, by= 'coral_id', .keep= TRUE)
Sample.Info
View(Sample.Info)
SA<- read.csv(file= "final_surface_areas.csv")%>%
select(coral_id, CSA_cm2)%>%
mutate(coral_id = as.character(coral_id))
list_df = list(Treatments, Volume, SA)
Sample.Info<-list_df%>%reduce(inner_join, by= 'coral_id', .keep= TRUE)
Sample.Info<-list_df%>%reduce(inner_join, by= 'coral_id')%>%
complete(coral_id = unique(list_df$coral_id))
Sample.Info
View(Sample.Info)
list_df = list(Treatments, Volume, SA)
Sample.Info<-list_df%>%reduce(inner_join, by= 'coral_id')
list_df = list(Treatments, Volume, SA)
Sample.Info<-list_df%>%reduce(left_join, by= 'coral_id')
starttimes<- read.csv(file= "starttimes.csv")
View(starttimes)
file.names.clean
coral_2<- read.csv(file = "20230605_g1_2_O2.csv")
getwd()
coral_2<- read.csv(file = "runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = "initial/runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = "/runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = "runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = "../runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = "/../runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = path.p,"/../runs/20230605_g1_2_O2.csv")
coral_2<- read.csv(file = (path.p,"/../runs/20230605_g1_2_O2.csv"))
coral_2<- read.csv(file = (path.p"/../runs/20230605_g1_2_O2.csv"))
coral_2<- read.csv(file = "../20230605_g1_2_O2.csv")
path.p1 <- file.path(current_dir, "runs", "20230605_g1_2_O2.csv")
# Read the CSV file using the created path
data <- read.csv(path.p1)
path.p1
# Read the CSV file using the created path
data <- read.csv(path.p1)
# Read the CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)
View(data)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(data, delta_t > 25)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t > 25)
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t > 25.0)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t < 25.0)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t > 25.0)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t > 25)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t >= 25)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
filter(delta_t >= 25.000)
path.p1 <- file.path(current_dir, "runs", "20230605_g1_2_O2.csv")
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
mutate(delta_t = delta_t / 180)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
mutate(as.numeric(delta_t))
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
mutate(delta_t=as.numeric(delta_t))
# Read the respo CSV file using the created path
data <- read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
mutate(delta_t=as.numeric(delta_t))%>%
filter(delta_t > 25.0)
data$Value <- rankLocReg(filtered_data$Value, alpha=0.4, method= "pc", verbse= TRUE)
data$Value <- rankLocReg(filtered_data$Value, alpha=0.4, method= "pc", verbose= TRUE)
data$Value <- rankLocReg(data$Value, alpha=0.4, method= "pc", verbose= TRUE)
data$Value <- rankLocReg(xall=data$delta_t, yall=data$Value, alpha=0.4, method= "pc", verbose= TRUE)
model <- rankLocReg(xall=data$delta_t, yall=data$Value, alpha=0.4, method= "pc", verbose= TRUE)
plot(model)
P<-  read.csv(path.p1, skip = 1, header=T)%>%
select(delta_t, Value, Temp)%>% # select columns 'delta_t', 'Value', and 'Temp'
mutate(delta_t=as.numeric(delta_t))%>%
filter(delta_t > 10 & delta_t < 25)
View(P)
Pmodel <- rankLocReg(xall=P$delta_t, yall=P$Value, alpha=0.4, method= "pc", verbose= TRUE)
plot(Pmodel)
getwd()
path.p<-"/Users/ninahmunk/Desktop/Projects/Regeneration/Respiration/Data/initial/runs"
#make a list of the respo file names inside intial timepoint folder, n=120
file.names <- list.files(path = path.p, pattern = "csv$")
file.names.full <- tools::file_path_sans_ext(file.names) #removes .csv
print(file.names.full)
#create respiration data frame, 4 columns and # rows corresponding to respo files (n=120)
Respiration<- data.frame(matrix(NA, nrow=length(file.names.full), ncol=4))
colnames(Respiration) <- c("coral_id","Intercept", "umol.L.sec","Temp.C")
Respiration$coral_id <- file.names.full # Insert file names into "coral_id" column
View(Respiration)
#create photosynthesis data frame
Photosynthesis<- data.frame(matrix(NA, nrow=length(file.names.full), ncol=4))
colnames(Photosynthesis) <- c("coral_id","Intercept", "umol.L.sec","Temp.C")
Photosynthesis$coral_id <- file.names.full
View(Photosynthesis)
#load in sample information files
Treatments<- read.csv(file= "samp_info.csv") #genotype, wound type, temp
Volume<- read.csv(file= "chamber_vol.csv") #vol of water in each chamber
#load in sample information files
Treatments<- read.csv(file= "Respiration/Data/initial/samp_info.csv") #genotype, wound type, temp
Volume<- read.csv(file= "chamber_vol.csv") #vol of water in each chamber
Volume<- read.csv(file= "Respiration/Data/initial/chamber_vol.csv") #vol of water in each chamber
SA<- read.csv(file= "Respiration/Data/initial/final_surface_areas.csv")%>% #final SA of each coral
select(coral_id, CSA_cm2)%>%
mutate(coral_id = as.character(coral_id))
SA<- read.csv(file= "Respiration/Data/initial/final_surface_areas.csv")
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')
library('stringr')
library('Rmisc')
library('janitor')
library('readxl')
SA<- read.csv(file= "Respiration/Data/initial/final_surface_areas.csv")%>% #final SA of each coral
select(coral_id, CSA_cm2)%>%
mutate(coral_id = as.character(coral_id))
list_df = list(Treatments, Volume, SA)
Sample.Info<-list_df%>%reduce(left_join, by= 'coral_id') #combine all info by coral id
# Add '_g1', '_g2', '_g3' based on values in the 'date' column
Sample.Info$file.names.full <- ifelse(Sample.Info$date == '20230605', paste(Sample.Info$date, '_g1', sep = '_'),
ifelse(Sample.Info$date == '20230606', paste(Sample.Info$date, '_g2', sep = '_'),
ifelse(Sample.Info$date == '20230607', paste(Sample.Info$date, '_g3', sep = '_'),
as.character(Sample.Info$coral_id))))  # Convert coral_id to character for NA in 'date'
rows_to_modify <- 109:120
Sample.Info$coral_id[rows_to_modify] <- substr(Sample.Info$coral_id[rows_to_modify], 10, nchar(Sample.Info$file.names.full[rows_to_modify])) # This removes the first 9 characters from rows 109-118 in the new_column
Sample.Info$file.names.full <- paste(Sample.Info$file.names.full, Sample.Info$coral_id, sep = "_") #creating new column to combine new column and coral_id separated by _
Sample.Info$file.names.full <- paste(Sample.Info$file.names.full, '_O2', sep = '_') # Add '_O2' to the end of each value in the new column
# View the updated data frame
View(Sample.Info)
#load in times as a list the same length as the number of files, im not sure I need this
starttimes<- read.csv(file= "starttimes.csv")
#load in times as a list the same length as the number of files, im not sure I need this
starttimes<- read.csv(file= "Respiration/Data/initial/starttimes.csv")
rtime<-starttimes$rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$ptime #for photosynthesis, filter as < than this time
i=1
FRow<-which(Sample.Info$file.names.full==strsplit(file.names[i],'.csv'))
strsplit(file.names[i],'.csv')
# read in the O2 data one by one
Photo.Data1 <-read.csv(file.path(path.p,file.names[i]), skip = 1, header=T) # skips the first line
Photo.Data1  <- Photo.Data1[,c("delta_t","Value","Temp")] #subset columns of interest
#Photo.Data1$Time <- as.POSIXct(Photo.Data1$Time,format="%H:%M:%S", tz = "") #convert time from character to time
Photo.Data1 <- na.omit(Photo.Data1) #omit NA from data frame
# clean up some of the data
n<-dim(Photo.Data1)[1] # length of full data
Photo.Data1 <- Photo.Data1 %>% mutate(delta_t=as.numeric(delta_t))%>%filter(delta_t > 25) #start at beginning of dark phase data point (25 minutes in)
n<-dim(Photo.Data1)[1] #list length of trimmed data
Photo.Data1$sec <- seq(1, by = 3, length.out = n) #set seconds by one from start to finish of run in a new column
#Save plot prior to and after data thinning to make sure thinning is not too extreme
rename <- sub(".csv","", file.names[i]) # remove all the extra stuff in the file name
pdf(paste0("Respiration/Output/",rename,"thinning.pdf")) # open the graphics device
par(omi=rep(0.3, 4)) #set size of the outer margins in inches
par(mfrow=c(1,2)) #set number of rows and columns in multi plot graphic
plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot (empty plot to fill) data as a function of time
usr  <-  par('usr') # extract the size of the figure margins
rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA) # put a grey background on the plot
whiteGrid() # make a grid
box() # add a box around the plot
points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
axis(1) # add the x axis
axis(2, las=1) # add the y-axis
par(omi=rep(0.3, 4)) #set size of the outer margins in inches
par(mfrow=c(1,2)) #set number of rows and columns in multi plot graphic
plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot (empty plot to fill) data as a function of time
usr  <-  par('usr') # extract the size of the figure margins
rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA) # put a grey background on the plot
whiteGrid() # make a grid
box() # add a box around the plot
points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
axis(1) # add the x axis
axis(2, las=1) # add the y-axis
# Thin the data to make the code run faster
Photo.Data.orig <-Photo.Data1 #save original unthinned data
Photo.Data1 <-  thinData(Photo.Data1 ,by=5)$newData1 #thin data by every 20 points for all the O2 values
Photo.Data1$sec <- as.numeric(rownames(Photo.Data1 )) #maintain numeric values for time
Photo.Data1$Temp<-NA # add a new column to fill with the thinned data
Photo.Data1$Temp <-  thinData(Photo.Data.orig,xy = c(1,3),by=5)$newData1[,2] #thin data by every 20 points for the temp values
# plot the thinned data
plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot thinned data
usr  <-  par('usr')
rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA)
whiteGrid()
box()
points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
axis(1)
axis(2, las=1)
##Olito et al. 2017: It is running a bootstrapping technique and calculating the rate based on density
#option to add multiple outputs method= c("z", "eq", "pc")
Regs  <-  rankLocReg(xall=Photo.Data.orig$sec, yall=Photo.Data.orig$Value, alpha=0.5, method="pc", verbose=TRUE)
# add the regression data
plot(Regs)
dev.off()
# fill in all the O2 consumption and rate data
Respiration[i,2:3] <- Regs$allRegs[1,c(4,5)] #inserts slope and intercept in the dataframe
Respiration[i,1] <- rename #stores the file name in the Date column
Respiration[i,4] <- mean(Photo.Data1$Temp, na.rm=T)  #stores the Temperature in the Temp.C column
summary(Regs)
View(Respiration)
i=2
for(i in 1:length(file.names)) { # for every file in list calculate O2 uptake or release rate and add the data to the Photo.R dataframe
#find the lines in sample info that have the same file name that is being brought in
FRow<-which(Sample.Info$file.names.full==strsplit(file.names[i],'.csv'))
# read in the O2 data one by one
Photo.Data1 <-read.csv(file.path(path.p,file.names[i]), skip = 1, header=T) # skips the first line
Photo.Data1  <- Photo.Data1[,c("delta_t","Value","Temp")] #subset columns of interest
#Photo.Data1$Time <- as.POSIXct(Photo.Data1$Time,format="%H:%M:%S", tz = "") #convert time from character to time
Photo.Data1 <- na.omit(Photo.Data1) #omit NA from data frame
# clean up some of the data
n<-dim(Photo.Data1)[1] # length of full data
Photo.Data1 <- Photo.Data1 %>% mutate(delta_t=as.numeric(delta_t))%>%filter(delta_t > 25) #start at beginning of dark phase data point (25 minutes in)
n<-dim(Photo.Data1)[1] #list length of trimmed data
Photo.Data1$sec <- seq(1, by = 3, length.out = n) #set seconds by one from start to finish of run in a new column
#Save plot prior to and after data thinning to make sure thinning is not too extreme
rename <- sub(".csv","", file.names[i]) # remove all the extra stuff in the file name
pdf(paste0("Respiration/Output/",rename,"thinning.pdf")) # open the graphics device
par(omi=rep(0.3, 4)) #set size of the outer margins in inches
par(mfrow=c(1,2)) #set number of rows and columns in multi plot graphic
plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot (empty plot to fill) data as a function of time
usr  <-  par('usr') # extract the size of the figure margins
rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA) # put a grey background on the plot
whiteGrid() # make a grid
box() # add a box around the plot
points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
axis(1) # add the x axis
axis(2, las=1) # add the y-axis
# Thin the data to make the code run faster
Photo.Data.orig <-Photo.Data1 #save original unthinned data
Photo.Data1 <-  thinData(Photo.Data1 ,by=5)$newData1 #thin data by every 20 points for all the O2 values
Photo.Data1$sec <- as.numeric(rownames(Photo.Data1 )) #maintain numeric values for time
Photo.Data1$Temp<-NA # add a new column to fill with the thinned data
Photo.Data1$Temp <-  thinData(Photo.Data.orig,xy = c(1,3),by=5)$newData1[,2] #thin data by every 20 points for the temp values
# plot the thinned data
plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot thinned data
usr  <-  par('usr')
rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA)
whiteGrid()
box()
points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
axis(1)
axis(2, las=1)
##Olito et al. 2017: It is running a bootstrapping technique and calculating the rate based on density
#option to add multiple outputs method= c("z", "eq", "pc")
Regs  <-  rankLocReg(xall=Photo.Data.orig$sec, yall=Photo.Data.orig$Value, alpha=0.5, method="pc", verbose=TRUE)
# add the regression data
plot(Regs)
dev.off()
# fill in all the O2 consumption and rate data
Respiration[i,2:3] <- Regs$allRegs[1,c(4,5)] #inserts slope and intercept in the dataframe
Respiration[i,1] <- rename #stores the file name in the Date column
Respiration[i,4] <- mean(Photo.Data1$Temp, na.rm=T)  #stores the Temperature in the Temp.C column
#Photo.R[i,5] <- PR[j] #stores whether it is photosynthesis or respiration
# rewrite the file everytime... I know this is slow, but it will save the data that is already run
}
