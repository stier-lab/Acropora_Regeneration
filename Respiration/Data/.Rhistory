library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')
library('stringr')
library('Rmisc')
library('janitor')
library('readxl')
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
getwd()
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data/runs/initial")
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
getwd()
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## install packages if you dont already have them in your library
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools')
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented')
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix')
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra')
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron')
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr')
if ("Rmisc" %in% rownames(installed.packages()) == 'FALSE') install.packages('Rmisc')
#load packages
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('stringr')
library('Rmisc')
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe", "Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
Resp.Info<- read_xlsx("resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
#Set the path of all respirometry files
getwd()
I
#load in sample information file
Resp.Info<- read_xlsx("../respiration/data/resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
#load in sample information file
Resp.Info<- read_xl("../respiration/data/resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
#load in sample information file
Resp.Info<- read_xlsx("../respiration/data/resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
info <- "../Regeneration_3/respiration/data/runs"
Resp.Info<- read_xlsx("resp_info.xlsx", sheet= "treatments")
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data")
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
p
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe", "Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
#load in sample information file
Resp.Info<- read_xlsx("resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
View(Resp.Info)
Volume.Info<- read_xlsx("resp_info.xlsx", sheet= "chamber_vol_initial")%>%clean_names()
View(Volume.Info)
list_df = list(Sample.Info, Volume.Info)
Sample.Info<-list_df%>%reduce(inner_join, by='coral_id')
list_df = list(Resp.Info, Volume.Info)
Sample.Info<-list_df%>%reduce(inner_join, by='coral_id')
View(Sample.Info)
rename <- Sample.Info$chamber_probe
#rename <- Sample.Info$chamber_probe
samp <- Sample.Info$coral_id
#run <- Sample.Info$run
date <- Sample.Info$date
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
View(starttimes)
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
rtime<-starttimes$rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$ptime #for photosynthesis, filter as < than this time
View(Resp.R)
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
rtime<-starttimes$rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$ptime #for photosynthesis, filter as < than this time
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
rtime<-starttimes$rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$ptime #for photosynthesis, filter as < than this time
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 203, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
processFile <- function(file.path, rtime, date, run, rename) {
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[, 16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.25) - 0.25), by = 0.25)
processFile <- function(file.path, rtime, date, run, rename) {
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.25) - 0.25), by = 0.25)
processFile <- function(file.path, rtime, date, run, rename) {
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)
Resp.Data <- Resp.Data %>% filter(Time.Min > rtime)
Resp.Data.N <- Resp.Data[, 3:26]
Resp.Rb <- data.frame(Date = character(0), Run = character(0), Sample.ID = character(0),
Chamber.ID = character(0), Slope = numeric(0), Intercept = numeric(0))
for (j in 1:(ncol(Resp.Data.N))) {
model <- rankLocReg(xall = Resp.Data$Time.Min, yall = as.numeric(Resp.Data.N[, j]),
alpha = 0.4, method = "pc", verbose = TRUE)
pdf(paste0("Mcap2020/Output/Respiration/RespirationPlots/", date, "_", run, "_", rename[j], "_regression_trunc.pdf"))
plot(model)
dev.off()
Resp.Rb[j, 1] <- as.character(date)
Resp.Rb[j, 2] <- as.character(run)
Resp.Rb[j, 3] <- as.character(samp[j + (i - 1) * ncol(Resp.Data.N)])
Resp.Rb[j, 4] <- as.character(rename[j])
Resp.Rb[j, 5:6] <- model$allRegs[i, c(4, 5)]
}
return(Resp.Rb)
}
View(processFile)
View(Resp.R)
View(Resp.Rb)
View(Photo.R)
View(Photo.Rb)
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration")
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv('../Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv('/Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data")
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe", "Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
#load in sample information file
Resp.Info<- read_xlsx("resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
Volume.Info<- read_xlsx("resp_info.xlsx", sheet= "chamber_vol_initial")%>%clean_names()
list_df = list(Resp.Info, Volume.Info)
Sample.Info<-list_df%>%reduce(inner_join, by='coral_id')
#rename <- Sample.Info$chamber_probe
samp <- Sample.Info$coral_id
#run <- Sample.Info$run
date <- Sample.Info$date
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
rtime<-starttimes$rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$ptime #for photosynthesis, filter as < than this time
processFile <- function(file.path, rtime, date, run, rename) {
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)
Resp.Data <- Resp.Data %>% filter(Time.Min > rtime)
# Resp.Data.N <- Resp.Data[, 3:26]
Resp.Rb <- data.frame(Date = character(0), Run = character(0), Sample.ID = character(0),
Chamber.ID = character(0), Slope = numeric(0), Intercept = numeric(0))
for (j in 1:(ncol(Resp.Data.N))) {
model <- rankLocReg(xall = Resp.Data$Time.Min, yall = as.numeric(Resp.Data.N[, j]),
alpha = 0.4, method = "pc", verbose = TRUE)
pdf(paste0("../Regeneration_3/respiration/output/", date, "_", run, "_", rename[j], "_regression_trunc.pdf"))
plot(model)
dev.off()
Resp.Rb[j, 1] <- as.character(date)
Resp.Rb[j, 2] <- as.character(run)
Resp.Rb[j, 3] <- as.character(samp[j + (i - 1) * ncol(Resp.Data.N)])
Resp.Rb[j, 4] <- as.character(rename[j])
Resp.Rb[j, 5:6] <- model$allRegs[i, c(4, 5)]
}
return(Resp.Rb)
}
View(Resp.Rb)
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
processFile <- function(file.path, rtime, date, run, rename) {
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)
Resp.Data <- Resp.Data %>% filter(Time.Min > rtime)
Resp.Data.N <- Resp.Data[, 9]
Resp.Rb <- data.frame(Date = character(0), Run = character(0), Sample.ID = character(0),
Chamber.ID = character(0), Slope = numeric(0), Intercept = numeric(0))
for (j in 1:(ncol(Resp.Data.N))) {
model <- rankLocReg(xall = Resp.Data$Time.Min, yall = as.numeric(Resp.Data.N[, j]),
alpha = 0.4, method = "pc", verbose = TRUE)
pdf(paste0("../Regeneration_3/respiration/output/", date, "_", run, "_", rename[j], "_regression_trunc.pdf"))
plot(model)
dev.off()
Resp.Rb[j, 1] <- as.character(date)
Resp.Rb[j, 2] <- as.character(run)
Resp.Rb[j, 3] <- as.character(samp[j + (i - 1) * ncol(Resp.Data.N)])
Resp.Rb[j, 4] <- as.character(rename[j])
Resp.Rb[j, 5:6] <- model$allRegs[i, c(4, 5)]
}
return(Resp.Rb)
}
Resp.Rb
processFile
Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 203, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table((path.p, "20230606_g2_89_O2.csv"), skip = 203, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(( "20230606_g2_89_O2.csv"), skip = 203, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data")
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 203, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
path.p<-"/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 203, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
#Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)
Resp.Data <- Resp.Data %>% filter(Time.Min > rtime)
Resp.Data.N <- Resp.Data[, 9]
View(Resp.Data)
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 203, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data
View(Resp.Data)
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 20, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 200, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 201, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 201, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
#Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data
View(Resp.Data)
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 201, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
#Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = c(1, 3:201), header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = c(1, 3:201), header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
skip_lines <- c(1, 3:201)
total_skip_lines <- sum(skip_lines)
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = total_skip_lines, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
skip_lines <- c(1, 3:201)
total_skip_lines <- sum(skip_lines)
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = total_skip_lines, header = TRUE, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 201, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 201, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
#Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
Resp.Data$Time.Min <- seq.int(from = 0, to = ((nrow(Resp.Data) * 0.05) - 0.05), by = 0.05)
Resp.Data <- Resp.Data %>% filter(Time.Min > rtime)
Resp.Data.N <- Resp.Data[, 9]
Resp.Data <- read.table(file.path(path.p, "20230606_g2_89_O2.csv"), skip = 201, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
#Resp.Data <- read.table(file.path, skip = 203, header = T, sep = ",", na.string = "NA", fill = TRUE, as.is = TRUE, fileEncoding = "latin1")
Resp.Data$Temp <- Resp.Data[,16]
