#set working directory
getwd()
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/Growth/raw")
################### Initial Skeletal Mass ########################################## #####
#load data
weight_initial<- read_xlsx("bouyantweight_initial.xlsx", sheet= "raw_data")%>%clean_names()%>%
#add column to calculate density of the glass stopper, 0.9965 is the density of freshwater
mutate(density_stopper= (air_weight_g * 0.9965)/(air_weight_g - fresh_weight_g))%>%
#add column to calculate density of seawater
mutate(density_sw= (air_weight_g - salt_weight_g)/ (air_weight_g / density_stopper))%>%
#add column to calculate volume of the coral (to use later in respo code)
mutate(vol_coral_cm3= bouyantweight_g / (density_aragonite - density_sw))%>%
#add column to calulate dry mass of the coral
mutate(dry_mass_coral_g= vol_coral_cm3 * density_aragonite)%>%
#select columns I want to use in data visualization
select(c(coral_id, dry_mass_coral_g))%>%
#rename column of coral mass to 'initial'
rename("initial" = "dry_mass_coral_g")
weight_initial<- read_xlsx("bouyantweight_initial.xlsx", sheet= "raw_data")%>%clean_names()
View(weight_initial)
weight_initial<- read_xlsx("bouyantweight_initial.xlsx", sheet= "raw_data")%>%clean_names()
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')
library('stringr')
library('Rmisc')
library('janitor')
library('readxl')
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
getwd()
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data")
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe", "Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Coral.ID","Chamber.Probe","Intercept", "umol.L.min")
Sample.Info<- read_xlsx("resp_info.xlsx", sheet= "treatments")%>%clean_names()%>%
mutate(coral_id = as.character(coral_id))
View(Sample.Info)
Volume.Info<- read_xlsx("resp_info.xlsx", sheet= "chamber_vol_initial")%>%clean_names()
View(Volume.Info)
list_df = list(Sample.Info, Volume.Info)
Resp.Info<-list_df%>%reduce(inner_join, by='coral_id')
View(Resp.Info)
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
#load in respiration start times as a list the same length as the number of files
starttimes<- read_xlsx("resp_info.xlsx", sheet= "starttimes")%>%clean_names()
View(starttimes)
rtime<-starttimes$Rtime #list respiration start times. For respiration measurements, filter as > than this time
rtime<-starttimes$rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$ptime #for photosynthesis, filter as < than this time
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1")
for(i in 1:length(file.names))
Resp.Data <-read.table(file.path(path.p,file.names[i]), header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1")
Resp.Data <-read.table(file.path(path.p,file.names[i]))
# Run loop to extract slopes from respiration data
Resp.Data <-read.table(file.path(path.p,file.names[i]), header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1")
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
Resp.Data$Temp <- Resp.Data[,31] #assigns temp column
Resp.Data$Time.Min <- seq.int(from=0, to=((nrow(Resp.Data)*0.25)-0.25), by = 0.25) #set time in min
Resp.Data <- Resp.Data %>% #filters data by phase (respiration only)
filter(Time.Min > rtime[i])
Resp.Data.N <- Resp.Data[,3:26] #subset desired columns
for(j in 1:(ncol(Resp.Data.N))){
model <- rankLocReg(
xall=Resp.Data$Time.Min, yall=as.numeric(Resp.Data.N[, j]),
alpha=0.4, method="pc", verbose=TRUE) #extract slopes, percentile rank method with minimum window size of 0.4. This means that in order to fit a slope, it has to encompass at least 40% of available datapoints.
pdf(paste0("Mcap2020/Output/Respiration/RespirationPlots/",date[i], "_",run[i],"_",rename[j],"_regression_trunc.pdf")) #generate output file names
plot(model)
dev.off()
Resp.Rb[j,1] <- as.character(date[i]) #stores the date
Resp.Rb[j,2] <- as.character(run[i]) #stores the run number
Resp.Rb[j,3] <- as.character(samp[j+(i-1)*ncol(Resp.Data.N)]) #stores the sample ID
Resp.Rb[j,4] <- as.character(rename[j]) #stores the chamber ID
Resp.Rb[j,5:6] <- model$allRegs[i,c(4,5)] #inserts slope and intercept in the dataframe
}
Resp.R <- rbind(Resp.R, Resp.Rb) #bind final data frame
}
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('stringr')
library('Rmisc')
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## install packages if you dont already have them in your library
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools')
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented')
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix')
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra')
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron')
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr')
if ("Rmisc" %in% rownames(installed.packages()) == 'FALSE') install.packages('Rmisc')
#load packages
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('stringr')
library('Rmisc')
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
View(Photo.R)
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv")
setwd("/Users/ninahmunk/Documents/GITHUB/Mcap2020")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv")
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
getwd()
Sample.Info<-read.csv(".../Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration")
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
getwd()
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
getwd()
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration")
getwd()
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv("Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
getwd()
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv("Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
getwd()
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
setwd("~/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Scripts/Respiration")
setwd("/Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv("Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
getwd()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## install packages if you dont already have them in your library
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools')
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented')
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix')
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra')
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron')
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr')
if ("Rmisc" %in% rownames(installed.packages()) == 'FALSE') install.packages('Rmisc')
#load packages
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('stringr')
library('Rmisc')
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Sample.Info<-read.csv("Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
getwd()
Sample.Info<-read.csv("Users/ninahmunk/Documents/GITHUB/EarlyLifeHistory_Energetics/Mcap2020/Data/Respiration/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv("Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
getwd()
Sample.Info<-read.csv('Resp_Sample_Info.csv', header=TRUE,
stringsAsFactors=FALSE) #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv('Resp_Sample_Info.csv', header=TRUE,
stringsAsFactors=FALSE) #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv', header=TRUE,
stringsAsFactors=FALSE) #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv', header=TRUE,
stringsAsFactors=FALSE)
getwd()
starttimes<-read.csv("Mcap2020/Data/Respiration/starttimes.csv")
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
setwd("/Users/ninahmunk/Desktop")
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
samp <- Sample.Info$Sample.ID
run <- str_sub(file.names, 10, 13) #grab run from file name
date <- str_sub(file.names, 1, str_length(file.names)-16) #grab date from file name
#load in respiration start times as a list the same length as the number of files
starttimes<-read.csv("Mcap2020/Data/Respiration/starttimes.csv") #read in file of starting R and P phase times
rtime<-starttimes$Rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$Ptime #for photosynthesis, filter as < than this time
View(Sample.Info)
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv'
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
samp <- Sample.Info$Sample.ID
run <- str_sub(file.names, 10, 13) #grab run from file name
date <- str_sub(file.names, 1, str_length(file.names)-16) #grab date from file name
#load in respiration start times as a list the same length as the number of files
starttimes<-read.csv("Mcap2020/Data/Respiration/starttimes.csv") #read in file of starting R and P phase times
rtime<-starttimes$Rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$Ptime #for photosynthesis, filter as < than this time
rename <- Sample.Info$Chamber.ID
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv')
View(Sample.Info)
rename <- Sample.Info$Chamber.ID
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
rename <- Sample.Info$Chamber.ID
rename <- Sample.Info$Chamber.ID
Chamber.ID
Chamber.ID
rename
samp <- Sample.Info$Sample.ID
Sample.ID
samp
run <- str_sub(file.names, 10, 13)
file.names
run <- str_sub(file.names, 10, 13)
run
date <- str_sub(file.names, 1, str_length(file.names)-16)
date
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
samp <- Sample.Info$Sample.ID
run <- str_sub(file.names, 10, 13) #grab run from file name
date <- str_sub(file.names, 1, str_length(file.names)-16) #grab date from file name
#load in respiration start times as a list the same length as the number of files
starttimes<-read.csv("Mcap2020/Data/Respiration/starttimes.csv") #read in file of starting R and P phase times
rtime<-starttimes$Rtime #list respiration start times. For respiration measurements, filter as > than this time
ptime<-starttimes$Ptime #for photosynthesis, filter as < than this time
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1")
Resp.Data$Temp <- Resp.Data[,31]
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
Resp.Data$Temp <- Resp.Data[,31] #assigns temp column
Resp.Data$Time.Min <- seq.int(from=0, to=((nrow(Resp.Data)*0.25)-0.25), by = 0.25) #set time in min
Resp.Data <- Resp.Data %>% #filters data by phase (respiration only)
filter(Time.Min > rtime[i])
Resp.Data.N <- Resp.Data[,3:26] #subset desired columns
for(j in 1:(ncol(Resp.Data.N))){
model <- rankLocReg(
xall=Resp.Data$Time.Min, yall=as.numeric(Resp.Data.N[, j]),
alpha=0.4, method="pc", verbose=TRUE) #extract slopes, percentile rank method with minimum window size of 0.4. This means that in order to fit a slope, it has to encompass at least 40% of available datapoints.
pdf(paste0("Mcap2020/Output/Respiration/RespirationPlots/",date[i], "_",run[i],"_",rename[j],"_regression_trunc.pdf")) #generate output file names
plot(model)
dev.off()
Resp.Rb[j,1] <- as.character(date[i]) #stores the date
Resp.Rb[j,2] <- as.character(run[i]) #stores the run number
Resp.Rb[j,3] <- as.character(samp[j+(i-1)*ncol(Resp.Data.N)]) #stores the sample ID
Resp.Rb[j,4] <- as.character(rename[j]) #stores the chamber ID
Resp.Rb[j,5:6] <- model$allRegs[i,c(4,5)] #inserts slope and intercept in the dataframe
}
Resp.R <- rbind(Resp.R, Resp.Rb) #bind final data frame
}
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
Resp.Data$Temp <- Resp.Data[,31] #assigns temp column
Resp.Data$Time.Min <- seq.int(from=0, to=((nrow(Resp.Data)*0.25)-0.25), by = 0.25) #set time in min
Resp.Data <- Resp.Data %>% #filters data by phase (respiration only)
filter(Time.Min > rtime[i])
Resp.Data.N <- Resp.Data[,3:26] #subset desired columns
for(j in 1:(ncol(Resp.Data.N))){
model <- rankLocReg(
xall=Resp.Data$Time.Min, yall=as.numeric(Resp.Data.N[, j]),
alpha=0.4, method="pc", verbose=TRUE) #extract slopes, percentile rank method with minimum window size of 0.4. This means that in order to fit a slope, it has to encompass at least 40% of available datapoints.
pdf(paste0("Mcap2020/Output/Respiration/RespirationPlots/",date[i], "_",run[i],"_",rename[j],"_regression_trunc.pdf")) #generate output file names
plot(model)
dev.off()
Resp.Rb[j,1] <- as.character(date[i]) #stores the date
Resp.Rb[j,2] <- as.character(run[i]) #stores the run number
Resp.Rb[j,3] <- as.character(samp[j+(i-1)*ncol(Resp.Data.N)]) #stores the sample ID
Resp.Rb[j,4] <- as.character(rename[j]) #stores the chamber ID
Resp.Rb[j,5:6] <- model$allRegs[i,c(4,5)] #inserts slope and intercept in the dataframe
}
Resp.R <- rbind(Resp.R, Resp.Rb) #bind final data frame
}
path.p
file.names
skip = 56
file.names
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')
library('stringr')
library('Rmisc')
library('janitor')
library('readxl')
Cham
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
getwd()
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data")
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
getwd
getwd()
path.p
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data/runs/initial")
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
file.names
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
#photosynthesis
Photo.R <- data.frame(matrix(NA, ncol=6))
colnames(Photo.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Photo.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Photo.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Sample.Info<-read.csv('Mcap2020/Data/Respiration/Resp_Sample_Info.csv') #information on life stage, number of individuals, runs, etc.
setwd("/Users/ninahmunk/Desktop")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## install packages if you dont already have them in your library
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools')
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented')
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix')
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra')
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron')
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr')
if ("Rmisc" %in% rownames(installed.packages()) == 'FALSE') install.packages('Rmisc')
#load packages
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('stringr')
library('Rmisc')
path.p<-"Mcap2020/Data/Respiration/Runs" #location of files
path.p
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
file.names
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')
library('stringr')
library('Rmisc')
library('janitor')
library('readxl')
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
path.p
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
getwd
getwd()
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data")
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
setwd("/Users/ninahmunk/Documents/Projects/Regeneration_3/respiration/data/runs/initial")
#Bring in the file names.
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE)
getwd()
#Set the path of all respirometry files
path.p<-"../Regeneration_3/respiration/data/runs/initial" #the location of all your respirometry files
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE))
getwd()
